Rにおける関数
dXXXX:確率密度関数(確率関数)
pXXXX:累積分布関数
qXXXX:逆分布関数
　累積分布関数が確率pになるx
rXXXX:乱数
　　　発生させる個数
XXXX:分布の名前


連続型
・χ二乗分布:chisq
(例)dchisq(x,df)

library(tidyverse)
n <- 20
alpha <- 0.05
calpha1 <- qchisq(alpha/2,n)
calpha2 <- qchisq(1-alpha/2,n)
y1 <- dchisq(calpha1,n)
y2 <- dchisq(calpha2,n)
ggplot(data=data.frame(x=c(-1,100)),aes(x=x)) + 
  stat_function(fun=dchisq, args=c(df=n) ) +
  geom_segment(x=calpha1,y=0,xend=calpha1,yend=y1,color="red")+
  geom_segment(x=calpha2,y=0,xend=calpha2,yend=y2,color="red")
  
線がχ二乗分布  
n <- 3     #自由度変えると形も変わってくる
m <- 1000
#
g4 <- numeric(m)
for(i in 1:m){
  g4[i] <- (sum(rnorm(n,0,1)^2))
}
g5 <- tibble(x=g4)
ggplot(g5) + geom_histogram(aes(x=x,y=..density..),bins=50) + 
  stat_function(fun=dchisq,args=c(df=n))  

・t分布:t  正規分布に非常に近い形
(例)dt(x,df)

n <- 30
alpha <- 0.05
talpha1 <- qchisq(alpha/2,n)
talpha2 <- qchisq(1-alpha/2,2)
y1 <- dt(talpha1,n)
y2 <- dt(talpha2,n)
ggplot(data=data.frame(x=c(-5,5)),aes(x=x) )+
  stat_function(fun=dt,args=c(df=n) )+
  geom_segment(x=talpha1,y=0,xend=talpha1,yend=y1,color="red")+
  geom_segment(x=talpha2,y=0,xend=talpha2,yend=y2,color="red")

n <- 3
m <- 1000
#
g4 <- numeric(m)
for(i in 1:m){
  g4[i] <- (sum(rnorm(n,0,1)^2))
}
g5 <- tibble(x=g4)
ggplot(g5) + geom_histogram(aes(x=x,y=..density..),bins=50) + 
  stat_function(fun=dchisq,args=c(df=n))

・F分布:f
(例)df(x,df1,df2)

library(tidyverse)
m <- 15
n <- 30
falpha1 <- qf(0.024,m,n) #1/qf(0.95,n,m) (nとmを入れ替え)
falpha2 <- qf(0.975,m,n)
y1 <- df(falpha1,m,n)
y2 <- df(falpha2,m,n)
ggplot(data=data.frame(x=c(-1,5)),aes(x=x)) +
  stat_function(fun=df, args=c(df1=m,df=n)) +
  geom_segment(x=falpha1,y=0,xend=falpha1,yend=y1,color="red")+
  geom_segment(x=falpha2,y=0,xend=falpha2,yend=y2,color="red")


m <- 1000
n1 <- 60;n2 <- 70; #値を変えるとどうなるのかな
a1 <- 10;b1 <- 10;a2 <- 30;b2 <- 40
ge <- numeric(m)
for(i in 1:m){
  ga <- rnorm(n1,a1,b1); gb <- rnorm(n2,a2,b2)
  gc <- sum((ga-mean(ga))^2/ (b1^2)); gd <- sum((gb-mean(gb))^2/(b2^2))
  ge[i] <- (gc/(n1-1))/(gd/(n2-1))
}
gf <- tibble(x=ge)
ggplot(gf) + geom_histogram(aes(x=x,y=..density..),bins = 50)+
  stat_function(fun = df,args = c(df1=c(df1=(n1-1),df2=(n2-1))))
  
  Warning message:
Computation failed in `stat_function()`:
unused arguments (df1.df1 = 59, df1.df2 = 69)


大数の弱法則
・rbinomで1回のベルヌーイ試行
・cumsum累積和
・probでその行までの確率
・n回行う


n <- 50000
p <- 0.3
g1 <- tibble(count=1:n,trial=rbinom(n,1,p),
             success=cumsum(trial),prob=success/count)
ggplot(g1,aes(x=count,y=prob)) + 
  ylim(0,1) + 
  geom_hline(yintercept = p,colour="red") + 
  geom_line()
  
> g1
# A tibble: 50,000 x 4
   count trial success  prob
   <int> <int>   <int> <dbl>
 1     1     0       0 0    
 2     2     1       1 0.5  
 3     3     0       1 0.333
 4     4     0       1 0.25 
 5     5     1       2 0.4  
 6     6     0       2 0.333
 7     7     0       2 0.286
 8     8     0       2 0.25 
 9     9     0       2 0.222
10    10     1       3 0.3  
# ... with 49,990 more rows  
  

中心極限定理
#一様乱数　平均(a+b)/2 分散(b-a)^2/12
#n個の乱数
#m回行う

# 5-3-3
library(tidyverse)
#各回の乱数の個数
n <- 1000
# ヒストグラムを書くための繰り返しの数
m <- 10000
# 一様乱数のためのパラメータ
a <- -10
b <- 10
#試しに一回
g2 <- tibble(x=runif(n,a,b))
ggplot(g2)+geom_histogram(aes(x=x,y=..density..),bins=50)　
#一様乱数にして発生させるとバラバラになるけど、そこから平均や分散を計算して
g3という値を作ってヒストグラムを取ってあげると正規分布に近い形になっていく

g3 <- numeric(m)
for(i in 1:m){
  g3[i] <- ( mean(runif(n,a,b)) -(a+b)/2 )  / ( sqrt((b-a)^2/12) /sqrt(n) )  
}
g4 <- tibble(x=g3)
ggplot(g4)+geom_histogram(aes(x=x,y=..density..),bins=50)



